---
import type { AccentBackground } from '../../types/components'

interface Props {
  backgroundType: AccentBackground
}

const { backgroundType } = Astro.props

const styles = {
  "--grid-block-background": backgroundType === "body" ? "var(--background-color)" : backgroundType === "footer" ? "var(--footer-background)" : "var(--background-color-dark)" 
}
---

<div class="accent-container">
  <div class="galaxy"></div>
  <div class="grid-container" style={styles}>
    <div class="grid-block"></div>
    <div class="grid-block"></div>
    <div class="grid-block"></div>
    <div></div>
    <div class="grid-block"></div>
    <div class="grid-block"></div>
    <div></div>
    <div></div>
    <div class="grid-block"></div>
  </div>
</div>

<style lang="scss">
  @import "../../styles/sizes.scss";

  .accent-container {
    position: absolute;
    top: 0;
    right: 0;
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: 1fr;
    width: 300px;
    z-index: -1;
    aspect-ratio: 1 / 1;
    overflow: hidden;

    @include aboveMobile {
      width: 400px;
    }
  }

  .galaxy {
    grid-column: 1 / -1;
    grid-row: 1 / -1;
    background-image: 
      linear-gradient(217deg, rgba(122, 0, 255, 0.8), rgba(48, 0, 219, 0.2) 70%),
      linear-gradient(20deg, rgba(255, 49, 253, 0.8), rgba(0, 255, 184, 0.2)  70%);
    border-radius: 50%;
    filter: blur(70px);
    transform: translate(60%, -40%);
    animation: rotateTopRightGalaxy 4000ms linear infinite;
  }

  .grid-container {
    grid-column: 1 / -1;
    grid-row: 1 / -1;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(3, 1fr);
    gap: 6px;
    width: 100%;
    z-index: 1;
  }

  .grid-block {
    background-color: var(--grid-block-background);
    width: 100%;
    height: 100%;
  }

  @keyframes rotateTopRightGalaxy {
    0% {
      transform: translate(60%, -40%) rotate(0deg);
    }

    100% {
      transform: translate(60%, -40%) rotate(360deg);
    }
  }
</style>