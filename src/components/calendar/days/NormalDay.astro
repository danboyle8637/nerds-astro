---
import CalendarDay from './CalendarDay.astro'
import type { CalendarDayType } from '../../../types/calendar'

export interface Props {
  type: CalendarDayType;
  daysArray: number[];
  today: number;
  activeMonth: number;
  currentMonth: number;
  year: number;
  timelineInDays: number
}

const { type, daysArray, today, activeMonth, currentMonth, year, timelineInDays, } = Astro.props as Props


const buildDaysBuildArray = (): number[] => {
  let buildDaysArray: number[] = []

  for (let i = 0; i < daysArray.length; i++) {
    for (let j = today; j < today + timelineInDays; j++) {
      if (daysArray[i] + 1 === j) {
        buildDaysArray.push(j)
      }
    }
  }

  return buildDaysArray
}

const buildDaysArray = buildDaysBuildArray()

const isBuildDayArray = daysArray.reduce((acc, cv): boolean[] => {
  let isBuildDay = false

  for (let i = 0; i < buildDaysArray.length; i++) {
    if (cv + 1 === buildDaysArray[i]) {
      isBuildDay = true
    }
  }

  if (isBuildDay) {
    acc.push(true)
  } else {
    acc.push(false)
  }

  return acc
}, [] as boolean[])
---

<>
  {daysArray.map((_, i) => {
    const isToday = today === i + 1
    let isBuildDay = isBuildDayArray[i]

    return (
      <CalendarDay 
        type={type}
        id={i}
        label={i + 1}
        isToday={isToday}
        dayOfWeek={i + 1}
        activeDay={today}
        status="blank"
        activeMonth={activeMonth}
        currentMonth={currentMonth}
        year={year}
        isBuildDay={isBuildDay}
      />
    )
  })}
</>

